import random
import numpy as np


def gen_bandits():
    """
    Función que devuelve una lista de probabilidades ordenadas al azar
    En esta lista se encuentra la probabilidad de premio de cada "tragaperras"
    """
    bandits = [0.1, 0.1, 0.1, 0.2, 0.6]
    random.shuffle(bandits)
    return bandits
    
    
def multi_armed_bandit(num_games=1000, epsilon=0.1, verbose=False):
    
    bandits = gen_bandits()
    total_reward = 0
    acum_reward_bandit = np.zeros(len(bandits))  # numerador
    num_selected_bandit = np.zeros(len(bandits)) # denominador
    q_bandits = np.zeros(len(bandits))            # Q(a)
    
    if verbose:
        print("Initial Bandits Distribution\n  {}".format(bandits))
    
    for game in range(0,num_games):
        
        # Hago una copiar de los Q(a)
        old_q_bandits = q_bandits.copy()
        
        # Selecciono "tragaperras" a la que jugar
        if np.random.random() < epsilon:
            bandit = np.random.randint(len(bandits)) # Exploro
        else:
            bandit = np.random.choice(np.flatnonzero(q_bandits == q_bandits.max())) # Exploto 
            
        # Obtengo el reward
        reward = 1 if (np.random.random() < bandits[bandit]) else 0
        
        # Actualizo reward total
        total_reward += reward
        
        # Actualizo valor (Q) de la "tragaperras"
        acum_reward_bandit[bandit] += reward
        num_selected_bandit[bandit] += 1
        q_bandits[bandit] = acum_reward_bandit[bandit] / num_selected_bandit[bandit]
        
        if verbose:
            print("\nGAME {game}\n  Old Q_Bandits = {old_q_bandits}\n  Selected Bandit = {bandit} \
                  \n  Reward = {reward}\n  Q_Bandits = {q_bandits}"
                  .format(game=game+1, old_q_bandits=old_q_bandits, bandit=bandit, 
                          reward=reward, q_bandits=q_bandits))
    
    return bandits, total_reward, q_bandits, num_selected_bandit

import matplotlib.pyplot as plt

# Lista de valores de épsilon a probar
epsilon_values = [0.01, 0.05, 0.1, 0.2, 0.5, 0.8, 0.9]

# Diccionario para almacenar los resultados de cada ejecución
results = {}

# Realizar el análisis para cada valor de épsilon
for epsilon in epsilon_values:
    _, total_reward, _, _ = multi_armed_bandit(num_games=1000, epsilon=epsilon, verbose=False)
    results[epsilon] = total_reward

# Encontrar el valor de épsilon que maximiza el número de clics
best_epsilon = max(results, key=results.get)
max_reward = results[best_epsilon]

# Imprimir el resultado
print(f"El valor de épsilon que maximiza el número de clics es: {best_epsilon}")
print(f"El número total de clics obtenido con épsilon {best_epsilon} es: {max_reward}")

# Definir los resultados de las imágenes en una lista
resultados_imagenes = [('A', 10, 218, 0.05), ('B', 5, 196, 0.03), ('C', 70, 190, 0.37), 
                      ('D', 3, 188, 0.02), ('E', 5, 208, 0.02)]

# Encontrar la imagen con más clics
max_clics = 0
imagen_max_clics = ''
for imagen, clics, _, _ in resultados_imagenes:
    if clics > max_clics:
        max_clics = clics
        imagen_max_clics = imagen

# Imprimir el resultado
print(f"La imagen que obtiene la mayor cantidad de clics es la imagen {imagen_max_clics} con {max_clics} clics.")

def multi_armed_bandit_exploitation_only(num_games=1000, verbose=False):
    bandits = gen_bandits()
    total_reward = 0
    num_selected_bandit = np.zeros(len(bandits)) # denominador

    best_bandit = np.argmax(bandits)  # selecciona la "tragaperras" con la probabilidad más alta

    for game in range(num_games):
        reward = 1 if (np.random.random() < bandits[best_bandit]) else 0
        total_reward += reward
        num_selected_bandit[best_bandit] += 1

        if verbose:
            print(f"\nGAME {game + 1}\n  Selected Bandit = {best_bandit}\n  Reward = {reward}\n")

    return total_reward, num_selected_bandit

# Simular el resultado con una tasa de explotación del 100%
total_reward_exploitation, num_selected_bandit_exploitation = multi_armed_bandit_exploitation_only(num_games=1000, verbose=False)

# Imprimir el resultado
print(f"Con una tasa de explotación del 100%, el total de clics obtenido es: {total_reward_exploitation}")
